{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","dots","a","b","id","n","lines","parents","distances","shortWay","activeDots","event","canvas","document","getElementById","getContext","getRandomIntInclusive","min","Math","ceil","max","floor","random","ctx","x","clientX","y","clientY","per","beginPath","clickDraw","weight","xmiddle","ymiddle","font","fillStyle","fillText","arc","PI","fill","strokeStyle","N","String","stroke","this","forEach","d","lineTo","prompt","setState","startDots","endDots","c","i","length","Infinity","j","Number","className","width","height","onClick","draw","map","bellmanFord","style","margin","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.515136e4.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            dots: [{\n                a: 200,\n                b: 300,\n                id: 1,\n            }],\n            n: 1,\n            a: 200,\n            b: 300,\n            lines: [],\n            parents: [],\n            distances: [],\n            shortWay: 0,\n            activeDots: [],\n        }\n    }\n\n    draw(event) {\n        var canvas = document.getElementById('canvas');\n        if (canvas.getContext) {\n            var ctx = canvas.getContext('2d');\n            var x = event.clientX;\n            var y = event.clientY;\n            let per = 0;\n            ctx.beginPath();\n\n            function getRandomIntInclusive() {\n                let min = Math.ceil(1);\n                let max = Math.floor(100);\n                return Math.floor(Math.random() * (max - min + 1)) + min;\n            }\n\n            let clickDraw = (weight) => {\n                let xmiddle = (this.state.a + x) / 2;\n                let ymiddle = (this.state.b + y) / 2;\n                ctx.font = \"18px serif\";\n                ctx.fillStyle = \"#FFF\";\n                ctx.fillText(weight, (xmiddle + x) / 2 + 12, (ymiddle + y) / 2 + 12);\n                ctx.arc(this.state.a, this.state.b, 11, 0, Math.PI * 2, true);\n                ctx.fill();\n                ctx.strokeStyle = \"#fff\";\n                ctx.fillStyle = \"#000\";\n                let N = String(this.state.n);\n                ctx.fillText(N, this.state.a - 6, this.state.b + 5);\n                ctx.stroke();\n                ctx.beginPath();\n                ctx.arc(((xmiddle + x) / 2 + x) / 2, ((ymiddle + y) / 2 + y) / 2, 4, 0, Math.PI * 2, true);\n                ctx.fill();\n                ctx.stroke();\n            };\n            this.state.dots.forEach(d => {\n                if (x >= d.a - 18 && x <= d.a + 18 && y >= d.b - 18 && y <= d.b + 18) {\n\n                    ctx.lineTo(d.a, d.b);\n                    let weight = prompt(\"Введите вес ребра\", getRandomIntInclusive());\n                    if (weight === null) {\n                        weight = 0;\n                    }\n                    clickDraw(weight);\n                    per = 1;\n                    this.setState((state) => {\n                        return {\n                            ...state,\n                            lines: [...state.lines, {\n                                startDots: {a: state.a, b: state.b, id: state.n},\n                                weight: weight,\n                                endDots: {x: d.a, y: d.b, id: d.id}\n                            }],\n                        }\n                    })\n                }\n            });\n            if (per === 0) {\n                ctx.lineTo(x, y);\n                let weight = prompt(\"Введите вес ребра\", getRandomIntInclusive());\n                if (weight === null) {\n                    weight = 0;\n                }\n                clickDraw(weight);\n                this.setState((state) => {\n                    return {\n                        ...state,\n                        a: x,\n                        b: y,\n                        dots: [...state.dots, {a: x, b: y, id: state.n + 1}],\n                        lines: [...state.lines, {\n                            startDots: {a: state.a, b: state.b, id: state.n},\n                            weight: weight,\n                            endDots: {x: x, y: y, id: state.n + 1}\n                        }],\n\n                        n: state.n + 1,\n                    }\n                })\n            }\n        }\n    }\n\n    bellmanFord() {\n        let distances = {};\n        let parents = {};\n        let shortWay = 0;\n        let c;\n        let activeDots = [];\n        for (let i = 0; i < this.state.dots.length; i++) {\n            distances[this.state.lines[i].endDots.id] = Infinity;\n            parents[this.state.lines[i].endDots.id] = null;\n        }\n        distances[1] = 0;\n        for (let i = 0; i < this.state.dots.length - 1; i++) {\n            for (let j = 0; j < this.state.lines.length; j++) {\n                c = this.state.lines[j];\n                if (distances[c.startDots.id] + c.weight < distances[c.endDots.id]) {\n                    distances[c.endDots.id] = distances[c.startDots.id] + c.weight;\n                    parents[c.endDots.id] = c.startDots.id;\n                    shortWay = shortWay + Number(c.weight);\n                    activeDots = [...activeDots, c.endDots.id]\n                }\n            }\n        }\n        for (let i = 0; i < this.state.lines.length; i++) {\n            c = this.state.lines[i];\n            if (distances[c.startDots.id] + c.weight < distances[c.endDots.id]) {\n                return undefined;\n            }\n        }\n        this.setState((state) => {\n            return {\n                ...state,\n                shortWay: shortWay,\n                activeDots: activeDots,\n            }\n        });\n        return {parents, distances, shortWay};\n    }\n\n    render() {\n\n        return (\n            <div className={\"main\"}>\n                <canvas id=\"canvas\" width={\"1200px\"} height={\"800px\"} onClick={(event) => this.draw(event)}>в</canvas>\n                <span className={\"Results\"}>\n                    Вес минимального пути: {this.state.shortWay}<br/>\n                    Минимальный путь: <span><span className={\"dots\"}>1</span>{this.state.activeDots.map(d => <span\n                    className={\"dots\"}>{d}</span>)}</span>\n                </span>\n                <button className={\"BellmanFordButton\"} onClick={() => this.bellmanFord()}>старт</button>\n                <div className={\"Description\"}><b style={{margin: \"15px\"}}>Данная программа реализует алгоритм\n                    Беллмана-Форда</b><br/>\n                    Для того, что бы начать рисовать график, нажмите на поле. Для соединения точки с уже существующей\n                    просто нажмите на неё. Приносим свои извинения, в данный момент сайт не адаптирован для мобильных\n                    устройств.\n                </div>\n            </div>\n\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}